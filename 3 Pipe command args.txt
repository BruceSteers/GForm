
Arguments sent to GForm via listening pipe
This list of commands is what can be sent to your GUI via the listening pipe.
For example, if you used the arg listen=/tmp/fifo2 when running GForm then using...
echo "close" >/tmp/fifo2 
will send the command 'close' to the GUI

--Object manipulation...
settext=object_name=text , sets text field of named object
setindex=object_name=number , selects the numbered item in either a listbox,gridview or combobox
setlist=object_name=comma,seperated,list  , changes the whole item list in either listbox or combobox
setlistitem=object_name=text=number  , changes a single numbered item text in either listbox or combobox
hide=object_name , hides named object, use 'hide' alone to hide main wiindow
show=object name, opposite of hide
disable=object_name , disables named object, use 'disable' alone to disable main wiindow
enable=object_name , opposite of disable
dislist=list|of|object|names , disables all objects in the list
enlist=list|of|object|names , enables all objects in the list
setfont=object_name|font , sets font for an object
setfocus=object_name , make object active
setvalue=object_name=on or off or blank for toggle (checkbox or togglebutton)

move=x,y,w,h , moves or resizes window, numbers can be absolute or relative +- or absent
Eg.  
'move=20,20,,' moves window to position 
'move=,,+20,' grows width by 20

mainfont=font name , changes GUI main font 
quit or close , closes the GUI

-- Gridview is quite a handy list so theres a few commands for the GridView alone.
   You could find it simpler in your script to use the gridview as varable storage.
   Like the 2 pkAppMan examples, one uses a listbox to display only the rule names
   and sorts through the fields in the bash script, while the GridView version stores
   and returns all the fields with each click and so can work with less coding.

  some commands like 'getrow' output text to the pipe so you will want to read the pipe
  immediately after sending the command to get the reply.
  typical usage should look something like...

echo "gridview=gv1|add|my,row,items" >>/tmp/fifo2

or if you're expecting a reply...
echo "gridview=gv1|getrow|0" >>/tmp/fifo2
read -u 3 REPLY
-------------
gridview=gridview_name|command|args, gridview commands as follows...

add|comma,seperated,list|index , inserts an item at index or adds to list end if no index supplied
del|index , delete row at index or selected row if omitted
clear , Clears list items but not the columns
getrow|index , returns comma seperated list or all items in selected row or at index
setrow|comma,sep,list|index , sets whole row to list at index or selected
gettext|row,column , get a single cell text from numbered cell
settext|row,column , Sets a single cell text at numbered cell
getall , gets ALL list items, each row is seperated by '|', each column by ','


dialog=type|default|flags , opens a requester dialog
type can be openfile, opendir, savefile, color, font (title sets the title)
flags can be showhidden or multi , the dialog will message back the result to the pipe or a blank text.
Eg.
Send "dialog=title|Select folder to open..."
Send "dialog=opendir|/home/|showhidden"
read -u 3 NEWAPP
if [ -z "$NEWAPP" ]; then
echo "Change path Cancelled.."
fi

message="Message text" , pops open a message window
stop or start , pauses the gui sending your script messages while you alter objects.
hold or unhold , stops/starts gui processing internal events like button presses.
check , makes GUI reply 'check' , use this to check if there are any messages backlogged in the pipe.
Ie , send the command 'check' to the gui then read the reply, it should just be 'check' messaged back, 
  if not then there was a command waiting, so proccess the command and read the pipe line again until it reads 'check'


